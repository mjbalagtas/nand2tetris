// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //instruction[0] = jg   jump-greater
    //instruction[1] = je   jump-equal
    //instruction[2] = jl   jump-less
    //instruction[3] = dm   store to M
    //instruction[4] = dd   store to Dregister
    //instruction[5] = da   store to Aregister
    //instruction[6..11] = ALU control input pins
    //instruction[12] = (if == 1) choose inM else choose Aregister
    //instruction[15] = opcode (if == 1 ) c-instruction else a-instruction

    DMux(in=true, sel=instruction[15], a=atype, b=ctype);

    Mux16(a=instruction, b=aluout, sel=ctype, out=aregin);

    Or(a=atype, b=instruction[5], out=loada);
    ARegister(in=aregin, load=loada, out=inA, out[0..14]=addressM);

    Mux16(a=inA, b=inM, sel=instruction[12], out=y);

    And(a=ctype, b=instruction[4], out=loadd);
    DRegister(in=aluout, load=loadd, out=x);

    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng);

    And(a=ctype, b=instruction[3], out=writeM, out=selM);

    Mux16(a=false, b=aluout, sel=selM, out=outM);

    Not(in=zr, out=notzr);
    Not(in=ng, out=ps);
    And(a=ps, b=notzr, out=gr);

    And(a=ctype, b=instruction[0], out=prej1);
    And(a=ctype, b=instruction[1], out=prej2);
    And(a=ctype, b=instruction[2], out=prej3);

    And(a=gr, b=prej1, out=jump1);
    And(a=zr, b=prej2, out=jump2);
    And(a=ng, b=prej3, out=jump3);

    Or(a=jump1, b=jump2, out=tempjump);
    Or(a=tempjump, b=jump3, out=jump);

    Not(in=jump, out=inc);

    PC(in=inA, load=jump, inc=inc, reset=reset, out[0..14]=pc);
}